buildscript {
    ext {
        springBootVersion = '2.7.2'
        boot = 'org.springframework.boot'
        lombok = 'org.projectlombok:lombok'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "$boot:spring-boot-gradle-plugin:$springBootVersion"
    }
}

allprojects {
    group = 'com.cpt.study'
    version = '0.0.1'
}

subprojects {
    apply plugin: boot
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly lombok
        annotationProcessor lombok
        testImplementation 'com.h2database:h2'
        testImplementation "$boot:spring-boot-starter-test"
        testImplementation "$boot:spring-boot-starter-webflux"
    }

    test {
        useJUnitPlatform()

        finalizedBy 'jacocoTestReport'
    }

    jacoco {
        toolVersion = '0.8.6'
    }

    jacocoTestReport {
        reports {
            html.enabled true
            xml.enabled true
            csv.enabled false

            html.destination file("$buildDir/jacoco.html")
            xml.destination file("$buildDir/jacoco.xml")
            csv.destination file("$buildDir/jacoco.csv")
        }

        finalizedBy 'jacocoTestCoverageVerification'
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                enabled = true
                element = 'BUNDLE'

                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.30
                }
                excludes = []
            }
        }
    }
}

['common'].each {
    def subProjectDir = new File(projectDir, it)
    subProjectDir.eachDir { dir ->
        def projectName = ":${it}-${dir.name}"
        project(projectName) {
            bootJar.enabled(false)
            jar.enabled(true)
        }
    }
}

['junit', 'springboot'].each {
    def subProjectDir = new File(projectDir, it)
    subProjectDir.eachDir { dir ->
        def projectName = ":${it}-${dir.name}"
        project(projectName) {
        }
    }
}
